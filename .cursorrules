# Cursor Rules for gatsby-theme-chrisvogt

## Project Overview
This is a Gatsby theme monorepo that powers www.chrisvogt.me - a personal website and blog with a social dashboard home page. The project uses Yarn workspaces to separate the theme code from the content.

**Current Goal**: Decouple all personal information and www.chrisvogt.me content from the `/theme` directory to make the theme more generic and reusable.

## Architecture
- **Root**: Contains workspace configuration and shared tooling
- **`theme/`**: The Gatsby theme package (`gatsby-theme-chrisvogt`)
- **`www.chrisvogt.me/`**: The actual website content and configuration

## Key Technologies
- **Gatsby 5.x**: Static site generator
- **React 18.x**: UI framework
- **Theme UI**: Design system and styling
- **Redux Toolkit**: State management
- **Jest**: Testing framework with comprehensive setup
- **Yarn v4 Workspaces**: Monorepo management

## Widget System
The theme includes a sophisticated widget system for the home page dashboard:
- **Recent Posts**: Latest blog posts
- **GitHub**: GitHub profile data, pinned repos, PRs
- **Goodreads**: Reading activity and book lists
- **Instagram**: Instagram posts and metrics
- **Spotify**: Music playlists and top tracks
- **Steam**: Gaming activity
- **Flickr**: Photo galleries and image collections

## Data Flow
1. **Data Sources**: Metrics API at `metrics.chrisvogt.me` (backed by chrisvogt/metrics GitHub repo)
2. **Actions**: `fetchDataSource.js` handles API calls with deduplication
3. **Reducers**: Process and store data with loading states (INIT, SUCCESS, FAILURE)
4. **Selectors**: Transform data for components
5. **Components**: Display data with loading states and error handling

## Testing Strategy
- **Jest**: Unit testing framework with comprehensive configuration
- **React Testing Library**: Component testing with DOM queries and user interactions
- **React Test Renderer**: Snapshot testing for visual regression testing
- **Redux Mock Store**: Mock Redux store for testing components with state
- **Jest Canvas Mock**: Canvas API mocking for visual components
- **Identity Object Proxy**: CSS/SCSS module mocking
- **File Mock**: Static asset mocking (images, fonts, etc.)
- **Mock Data**: Comprehensive mocks for external APIs in `__mocks__/` directory

## Development Patterns
- Functional components with hooks
- Consistent prop interfaces
- Loading and error states
- Accessibility considerations
- Responsive design
- Redux actions for API calls
- Error handling and retry logic
- Theme UI components with dark/light mode support

## External Dependencies
- **Backing Service**: Metrics API at metrics.chrisvogt.me
- **Image Hosting**: Cloudinary and Imagix for external CDNs
- **Static Assets**: Local images in `static/` directory

## Code Quality
- **ESLint**: Code linting
- **Prettier**: Code formatting
- **Husky**: Git hooks
- **TypeScript-like**: JSDoc comments for type safety

## Common Development Tasks
When adding new widgets:
1. Create widget component in `src/components/widgets/[name]/`
2. Add Redux actions and reducers
3. Create selectors for data access
4. Add mock data
5. Write comprehensive tests
6. Update documentation

## Important Notes
- Follow existing patterns and maintain backward compatibility
- Update tests and mocks when modifying existing widgets
- Consider performance implications
- Use HTTPS for local development
- Store API keys in environment variables
- Regular security updates for dependencies 