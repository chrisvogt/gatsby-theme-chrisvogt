import React from 'react'
import { render, screen, fireEvent, act } from '@testing-library/react'
import '@testing-library/jest-dom'
import { TestProvider } from '../../../testUtils'
import AiSummary from './ai-summary'

// Mock parseSafeHtml to return React elements for testing
jest.mock('../../../helpers/safeHtmlParser', () => ({
  parseSafeHtml: html => {
    if (!html) return null

    // Simple HTML to React element conversion for testing
    if (html.includes('<p>')) {
      const content = html.replace(/<\/?p[^>]*>/g, '')
      return content
    }

    return html
  }
}))

// Mock FontAwesome icons
jest.mock('@fortawesome/react-fontawesome', () => ({
  FontAwesomeIcon: ({ icon }) => <span data-testid={`icon-${icon.iconName}`}>{icon.iconName}</span>
}))

// Mock IntersectionObserver
const mockIntersectionObserver = jest.fn()
let observerCallback = null

mockIntersectionObserver.mockImplementation(callback => {
  observerCallback = callback
  return {
    observe: () => null,
    unobserve: () => null,
    disconnect: () => null
  }
})

window.IntersectionObserver = mockIntersectionObserver

const renderWithTheme = component => {
  return render(<TestProvider>{component}</TestProvider>)
}

describe('AiSummary', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    jest.useFakeTimers()
    observerCallback = null
  })

  afterEach(() => {
    jest.useRealTimers()
  })

  const triggerIntersection = (isIntersecting = true) => {
    if (observerCallback) {
      observerCallback([{ isIntersecting }])
    }
  }

  describe('Component rendering', () => {
    it('renders nothing when aiSummary is null', () => {
      const { container } = renderWithTheme(<AiSummary aiSummary={null} />)
      expect(container.firstChild).toBeNull()
    })

    it('renders nothing when aiSummary is undefined', () => {
      const { container } = renderWithTheme(<AiSummary aiSummary={undefined} />)
      expect(container.firstChild).toBeNull()
    })

    it('renders nothing when aiSummary is empty string', () => {
      const { container } = renderWithTheme(<AiSummary aiSummary={''} />)
      expect(container.firstChild).toBeNull()
    })

    it('renders the component with single paragraph', async () => {
      const aiSummary = '<p>This is a test summary with one paragraph.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      // Trigger intersection and wait for animations
      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('AI Summary')).toBeInTheDocument()
      expect(screen.getByText('This is a test summary with one paragraph.')).toBeInTheDocument()
      expect(screen.getByText('Generated by Gemini (AI)')).toBeInTheDocument()
    })

    it('renders the component with multiple paragraphs', async () => {
      const aiSummary = '<p>First paragraph.</p><p>Second paragraph.</p><p>Third paragraph.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      // Trigger intersection and wait for animations
      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('AI Summary')).toBeInTheDocument()
      expect(screen.getByText('First paragraph.')).toBeInTheDocument()
      expect(screen.getByText('Generated by Gemini (AI)')).toBeInTheDocument()
      expect(screen.getByText('Read More')).toBeInTheDocument()
    })

    it('does not show Read More button when there is only one paragraph', async () => {
      const aiSummary = '<p>Single paragraph only.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.queryByText('Read More')).not.toBeInTheDocument()
      expect(screen.queryByText('Show Less')).not.toBeInTheDocument()
    })
  })

  describe('Expand/Collapse functionality', () => {
    it('expands and shows remaining paragraphs when Read More is clicked', async () => {
      const aiSummary = '<p>First paragraph.</p><p>Second paragraph.</p><p>Third paragraph.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      const readMoreButton = screen.getByText('Read More')
      fireEvent.click(readMoreButton)

      expect(screen.getByText('Show Less')).toBeInTheDocument()
    })

    it('collapses and hides remaining paragraphs when Show Less is clicked', async () => {
      const aiSummary = '<p>First paragraph.</p><p>Second paragraph.</p><p>Third paragraph.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      const readMoreButton = screen.getByText('Read More')
      fireEvent.click(readMoreButton)

      const showLessButton = screen.getByText('Show Less')
      fireEvent.click(showLessButton)

      expect(screen.getByText('Read More')).toBeInTheDocument()
    })
  })

  describe('IntersectionObserver behavior', () => {
    it('uses IntersectionObserver when available', async () => {
      const aiSummary = '<p>Test content.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      // Verify IntersectionObserver was called
      expect(mockIntersectionObserver).toHaveBeenCalledWith(expect.any(Function), {
        threshold: 0.1,
        rootMargin: '50px'
      })
    })

    it('triggers visibility when intersection observer fires', async () => {
      const aiSummary = '<p>Test content.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      // Simulate intersection
      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('Test content.')).toBeInTheDocument()
    })

    it('does not trigger visibility when intersection observer fires with false', async () => {
      const aiSummary = '<p>Test content.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      // Simulate no intersection
      await act(async () => {
        triggerIntersection(false)
        jest.advanceTimersByTime(600)
      })

      expect(screen.queryByText('Test content.')).not.toBeInTheDocument()
    })
  })

  describe('Fallback behavior without IntersectionObserver', () => {
    beforeEach(() => {
      // Remove IntersectionObserver
      delete window.IntersectionObserver
    })

    afterEach(() => {
      // Restore IntersectionObserver
      window.IntersectionObserver = mockIntersectionObserver
    })

    it('falls back to immediate visibility when IntersectionObserver is not available', async () => {
      const aiSummary = '<p>Test content.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('Test content.')).toBeInTheDocument()
    })
  })

  describe('Icon and styling', () => {
    it('renders robot icons', async () => {
      const aiSummary = '<p>Test content.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      // Should have two robot icons - one in header, one in footer
      const robotIcons = screen.getAllByTestId('icon-robot')
      expect(robotIcons).toHaveLength(2)
    })

    it('renders chevron icons in Read More button', async () => {
      const aiSummary = '<p>First paragraph.</p><p>Second paragraph.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByTestId('icon-chevron-down')).toBeInTheDocument()

      // Click to expand
      fireEvent.click(screen.getByText('Read More'))
      expect(screen.getByTestId('icon-chevron-up')).toBeInTheDocument()
    })
  })

  describe('Content parsing', () => {
    it('handles content with mixed paragraph tags', async () => {
      const aiSummary = '<p>First paragraph.</p><p>Second paragraph.</p><p>Third paragraph.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('First paragraph.')).toBeInTheDocument()
      expect(screen.getByText('Read More')).toBeInTheDocument()

      // Expand to see remaining content
      fireEvent.click(screen.getByText('Read More'))
      expect(screen.getByText('Show Less')).toBeInTheDocument()
    })

    it('handles content with no paragraph tags', async () => {
      const aiSummary = 'Plain text without paragraph tags'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('Plain text without paragraph tags')).toBeInTheDocument()
    })
  })

  describe('Animation timing', () => {
    it('shows content after the correct delay', async () => {
      const aiSummary = '<p>Test content.</p>'

      renderWithTheme(<AiSummary aiSummary={aiSummary} />)

      // Content should not be visible immediately
      expect(screen.queryByText('Test content.')).not.toBeInTheDocument()

      // After triggering intersection and waiting 600ms, content should be visible
      await act(async () => {
        triggerIntersection(true)
        jest.advanceTimersByTime(600)
      })

      expect(screen.getByText('Test content.')).toBeInTheDocument()
    })
  })
})
